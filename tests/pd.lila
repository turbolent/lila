defclass <tree-node> (<object>);
defclass <data-node> (<tree-node>) { left; right };
defclass <empty-node> (<tree-node>);

defpm isomorphic? (t1, t2)
  when (t1 :: <empty-node>)
    && (t2 :: <empty-node>)
{ true };

defpm isomorphic? (t1, t2)
  when (t1 :: <empty-node>)
    || (t2 :: <empty-node>)
{ false };

defpm isomorphic? (t1, t2)
  when (t1 :: <data-node>)
    && (t2 :: <data-node>)
{
  isomorphic?(get(t1, "left"), get(t2, "left"))
    && isomorphic?(get(t1, "right"), get(t2, "right"));
};

def empty = make(<empty-node>);
def empty-tree = make(<data-node>, empty, empty);
def tree1 = make(<data-node>, empty, empty-tree);
def tree2 = make(<data-node>, empty-tree, empty);

isomorphic?(empty, empty); // => true
isomorphic?(empty, tree1); // => false
isomorphic?(tree1, tree2); // => false
isomorphic?(tree1, tree1); // => true
apply(isomorphic?, make-array(empty, empty)); // => true
