
define foo = 100;

// calls

+(1, 2);


print(as-string((function (a, b) { b })(1, 2))); 


// bindings

let x = 23 { "FOO"; x };
print(let x = "bindings work" { print("ok"); x });

define function printer (first) {
  function (second) {
    function (third) {
      print(first);
      print(second);
      print(third);
    }
  }
};

printer("a")("b")("c");


// closures

define function adder (a) {
  function (b) {
    +(a, b);
  }
};

define add23 = adder(23);

print(as-string(add23(42)));


(function (x) {
  x;
  (function (y) {
    y;
    +(x, y)
   })(42)
})(23);

(function (x) {
  x;
  (function (z) {
    z;
    (function (y) {
      y;
      +(x, y)
     })(42)
  })(100)
})(23);

print("here...");

// conditionals

if true { false } else { true };

if true { "true" } else { "false" };

1 && true;
2 && "true";
1 || 2;

if (1) { 1 } else { 2 };

// TODO: stack frame map broken

if (1) { 1; 2 } else { 3 };

if (1) { 1 } else { (2, 3) };

let counter = make(<object>) {
  set!(counter, "i", 0);
  while <(get(counter, "i"), 10) {
    print("x"); 
    inc!(counter, "i");
  }
};

(if true { true } else { true },
 if true { true } else { true });
