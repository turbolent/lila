defpm factorial (n)
  when test <(n, 0)
{
  false
};

defpm factorial (n)
  when test ==(n, 0)
{
  0
};

defpm factorial (n)
  when test >(n, 0)
{
  *(n, factorial(-(n, 1)))
};

defpm foo ()
  when (b := a)
        && (test (fn (a, b) { b }))
{
  false
};


defpm foo2 ()
  when (a := 1)
       && (test (let a = a {"a"; a }))
{
  false
};

defpm foo3 ()
  when (a := n)
       && (test (if (a) { c; a } else { b; a }))
{
  false
};

defpm bar ()
  when (x := 1) && (n :: <integer>) && ((n :: <string>) || (not test n))
{
  false
};

defpm bar2 ()
  when (test (fn (a, b) { b })) && (test (fn (a, b) { b }))
{
  false
};

defpm bar3 ()
  when (test if (a) { a; b } else {2; 3} ) && (test if (a) { a; b } else {2; 3})
{
  false
};


