
// builtin classes

<object>;

<class>;

// define class

defclass <foo> (<object>);

let x = make(<foo>) {
  print(as-string(object-class(x)));
  x;
};

defclass <bar> (<foo>);

// subtyping tests

assert(subtype?(<bar>, <foo>));
assert(subtype?(<foo>, <foo>));
assert(subtype?(<bar>, <bar>));
assert(not(subtype?(<foo>, <bar>)));

// multiple inheritance

defclass <blub> (<foo>);
defclass <baz> (<bar>, <blub>);

assert(subtype?(<baz>, <foo>));
assert(subtype?(<baz>, <bar>));

// use make to create a class

def <baz2> = make(<class>, "<baz2>", make-array(<bar>, <blub>));

assert(subtype?(<baz2>, <foo>));
assert(subtype?(<baz2>, <bar>));

// anonymous classes

make(<class>, "<xyz>");
make(<class>);


assert(subtype?(<false>, <boolean>));
assert(subtype?(<true>, <boolean>));


assert(instance?(false, <boolean>));
assert(instance?(false, <false>));
assert(not(instance?(false, <true>)));
assert(instance?(true, <boolean>));
assert(instance?(true, <true>));
assert(not(instance?(true, <false>)));


// properties

defclass <xyz> (<object>) {
  a;
  b
};

let xyz = make(<xyz>, 1, 2) {
  assert(==(get(xyz, "a"), 1));
  assert(==(get(xyz, "b"), 2));
  set!(xyz, "a", 3);
  assert(==(get(xyz, "a"), 3));
};
