defclass <a> (<object>);
defclass <b> (<a>);
defclass <c> (<b>);

defmm foo (x :: <a>, y :: <a>) { 1 };
defmm foo (x :: <b>, y :: <b>) { 2 };
defmm foo (x :: <a>, y :: <c>) { 3 };
defmm foo (x :: <b>, y :: <c>) { 4 };

def a = make(<a>);
def b = make(<b>);
def c = make(<c>);

foo(a, c);
foo(b, b);
foo(a, a);
foo(c, b);
foo(b, a);
foo(b, c);

// new class

defclass <d> (<c>);
def d = make(<d>);
foo(a, d);

// varargs

defmm bar (x :: <a>, y :: <a> ... rest) { make-array(1, rest) };
defmm bar (x :: <b>, y :: <b> ... rest) { make-array(2, rest) };

bar(a, b, 3, 4, 5);
bar(b, b, 7, 8, 9);

apply(bar, make-array(b, b, 1, 2, 3));

// next-method

defmm baz (x :: <a>) {
  print("baz(<a>)");
  print(as-string(x));
  print(as-string(next-method));
};

defmm baz (x :: <b>) {
  print("baz(<b>)");
  print(as-string(x));
  print(as-string(next-method));
  next-method(b);
};

defmm baz (x :: <c>) {
  print("baz(<c>)");
  print(as-string(x));
  print(as-string(next-method));
  next-method();
};

baz(c);

// next-method with varargs

defmm xyz (x :: <a> ... rest) {
  print("xyz(<a>)");
  print(as-string(next-method));
  print(as-string(x));
  print(as-string(rest));
};

defmm xyz (x :: <b> ... rest) {
  print("xyz(<a>)");
  print(as-string(next-method));
  print(as-string(x));
  print(as-string(rest));
  next-method(x, 4, 5, 6);
};

defmm xyz (x :: <c> ... rest) {
  print("xyz(<a>)");
  print(as-string(next-method));
  print(as-string(x));
  print(as-string(rest));
  next-method();
};

xyz(c, 1, 2, 3);
